; Template to analyze T-ReCS data
 
;Initially, made from the T-ReCs script...
; Version 0.0 						MJI 10 May 2008


adate =  'Test'
frames= [1, 2, 1, 2]
tsize =  [-1, -1, 0.1, 0.1];[replicate(-1, 2), replicate(0.1, 8)]

cal4src =  0;[[0, 1], [0, 0]]

prefix =  'g7s2/seg1.0_pst1.0_FGS_F481M_'
suffix =  '_flatspec_tt1.fits'
;The data directory
ddir = '~/tel/jwst/june/'
;The save directory (for final products)
sdir = '~/tel/jwst/june/'
;The cube direcotory (for intermediate data products)
cdir = sdir
filter =  'F481M'
final_size = 256
mask =  'g7s2'
;_____________________________________________________________
; The rest is done automatically.
;_____________________________________________________________
process_history =  adate
nframes=n_elements(frames)
n_cubes =  2
targ  =  where(tsize lt 0,  complement = calib)
cal4src =  [[0, 1], [0, 0]]
process_history =  adate

nframes=n_elements(frames)
a =  readfits(ddir + prefix + string(frames[0], format="(I01)") + suffix, head)

olog = make_olog(n_cubes, [-1, 0.1], frames, -1)
;Fill the cube_fnames simply with the original names.
;!!! Does not work - bispect needs more than 1 frame per cube.
;cube_fnames =  strarr(nframes, 2)
;for i = 0, nframes-1 do cube_fnames[i, 1] =  string(frames[i], format="(I01)")
;for i = 0, nframes-1 do cube_fnames[i, 0] = prefix + cube_fnames[i, 1] + suffix

framestats =  {xpk:fltarr(nframes, 2), ypk:fltarr(nframes, 2), totflx:fltarr(nframes, 2), $
 pkflx:fltarr(nframes, 2), skybgr:fltarr(nframes, 2),  phot:fltarr(nframes, 2)}

;Basic stuff copied from freud...
  olog.mask[*] = mask
  olog.instrument[*] = 'JWST'
  xsz = sxpar(head,'NAXIS1')
  ysz = sxpar(head,'NAXIS2')
  olog.nax1[*]=xsz
  if (final_size ne -1) then olog.nax1[*] = final_size
  olog.nax2[*]=ysz
  if (final_size ne -1) then olog.nax2[*] = final_size
  olog.nax3[*]=sxpar(head,'NAXIS3')
  olog.filter[*]=filter
  olog.pa[*]= 0.0

 ;Write the cubeinfo file for the first pattern
 olog.rawdir    = ddir
 olog.proc_hist = process_history
 olog.cal4src   = cal4src 
 olog.cube_tsize[*]=[-1, 0.1]
 olog.cubedir = cdir

 ;Now actually make the cubes and fill out their names
 tcube = fltarr(olog.nax1[0],  olog.nax2[0],  n_elements(targ))
 ccube = fltarr(olog.nax1[0],  olog.nax2[0],  n_elements(calib))
 for i = 0, n_elements(targ)-1 do begin
  a =  readfits(ddir + prefix + string(frames[targ[i]], format="(I01)") + suffix, head)
  if( xsz mod 2 eq 0) then $
   tcube[olog.nax1[0]/2-xsz/2:olog.nax1[0]/2+xsz/2-1, olog.nax2[0]/2-ysz/2:olog.nax2[0]/2+ysz/2-1, i] =  a $
  else $
   tcube[olog.nax1[0]/2-xsz/2:olog.nax1[0]/2+xsz/2, olog.nax2[0]/2-ysz/2:olog.nax2[0]/2+ysz/2, i] =  a
 endfor
 if (calib[0] ne -1) then begin
  for i = 0, n_elements(calib)-1 do begin
   a =  readfits(ddir + prefix + string(frames[calib[i]], format="(I01)") + suffix, head)
   if( xsz mod 2 eq 0) then $
    ccube[olog.nax1[0]/2-xsz/2:olog.nax1[0]/2+xsz/2-1, olog.nax2[0]/2-ysz/2:olog.nax2[0]/2+ysz/2-1, i] =  a $
   else $
    ccube[olog.nax1[0]/2-xsz/2:olog.nax1[0]/2+xsz/2, olog.nax2[0]/2-ysz/2:olog.nax2[0]/2+ysz/2, i] =  a
  endfor
 endif
 olog.cube_fname =  fltarr(2, 2)
 olog.cube_fname[*, 1] = [string(targ[0], format="(I01)"),  string(calib[0],  format="(I01)")]
 olog.cube_fname[*, 0] = ['Targ' + olog.cube_fname[0, 1] + '.fits',  'Calib' + olog.cube_fname[1, 1]+ '.fits']
 writefits,  ddir + olog.cube_fname[0, 0],  tcube
 olog.cube_sz[0, *] =  (size(tcube))[1:3]
 if (calib[0] ne -1) then begin
  writefits,  ddir + olog.cube_fname[1, 0],  ccube
  olog.cube_sz[1, *] =  (size(ccube))[1:3]
 endif

 ;Finally, save the data.
 save, olog,framestats, file=sdir + 'cubeinfo_'+adate +'.idlvar'

end
