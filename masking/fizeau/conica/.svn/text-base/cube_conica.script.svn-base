; This Template outputs cleaned CONCIA data for further analysis later.
; Src and Cal input files are to be glued into tw
; Philosophy is to do all basic image-plane processing (eg sky
; subtract etc) but leave the FFT part for later routines.
; Also generate diagnostics, and reject abberrant frames.
; Enter all Critical Info at the Top.
;
; Version 0.0    PGT 12Jul07
;_____________________________________________________________
;  Prime script information
;____________________________________________________________
conica_data_path = '~snert/conica/data/conica_Mar09/'
adate='29June09'  		; Analysis Date (or identifier)
ddir=conica_data_path+'60.A-9800J/2009-03-05/SCIENCE/'
prefix = 'NACO_POL_SCI065_'
extn='.fits.Z' 
flat_file='~snert/conica/data/conica_Mar09/Testing/flat256_Ks.idlvar'


;; For unpolarized data
; frames=[120,121, $  ;these are src
;        130,131]     ;these are cal
;updown =  0         	; 0= normal operation no wollaston, find star anywhere on chip
			; 1= find star in top half of chip
			; 2= find star in bottom half of chip
;tsize=[-1,-1,0,0]     	; -ve number = src. use -2, -3 etc if 2 src   
		        ; +ve number or zero = cal                    

;; For contiguous, polarized data
src_start=213
nsrc=10
cal_start=-1            ; if no separate calibrator (i.e. self-calibration), 
                        ; set this to -1
if (cal_start[0] ge 0) then begin 
  frames = [src_start+indgen(nsrc), cal_start+indgen(nsrc)] 
  nfr = n_elements(frames)
  frames=reform(rebin(reform(frames,1,nfr),2,nfr),nfr*2) 
  tsize=[replicate(-1,n_elements(frames)), replicate(14.3,n_elements(frames))]  
endif else begin
  frames = [src_start+indgen(nsrc)]
  nfr = n_elements(frames)
  frames=reform(rebin(reform(frames,1,nfr),2,nfr),nfr*2) 
  tsize=[replicate(-1,n_elements(frames))]
endelse

updown = reform(rebin([1,2],2,nfr),2*nfr)
              


skies= -1       		; Sky Numbers 
                                ; -1 = make up single sky for all data
                                ; -2 = make up 2 separate skies for src and cal data 
                                ;      (this is useful when diff brightnesses/small dither)

dohandsky=0			; 0 = automatic operation
                                ; 1 = manual check that sky frame has found + blanked out the star

cal4src= -1                     ; -1 = each src calibrated against every cal
                                ; -2 = for polarized data only, each src only calibrated against cals in 
                                ;      same chip quadrant
                                ; -3 = for polarized data only, each src only against cals with the same 
                                ;      HWP rotation in the same chip quadrant
                                ; Otherwise intarr(ncubes,ncubes),
                                ; where '1'=use as cal 

sky_lr = 0                      ; 1 = ssky built up by cutting out entire half of chip with source,
                                ;     can only be used for left-right dithered data.
                                ; 0 = ssky built up using circular star masks in makedithersky_conica.pro.    

horiz_destripe=1                ; 1 = basic horizontal de-striping is applied to data after 
                                ;     sky subtraction.
                                ; 0 = no horizontal de-striping applied.                                  
discard_last=1                  ; 1 = last frame of each cube is not included in the analysis
                                ;     (eg. when last frame is average of all other frames). 
                                ; 0 = last frame included in the analysis. 
comments=''

ddir_sky=ddir
                       
;____________________________________________________________
;  Analysis Options
;____________________________________________________________

skymask= 130           ; Diameter of circular patch to block out in making dithersky
                       ; For 512x514 data, should be able to set this to 300 
                       ; if dither is large enough - lower to maybe 170 if not.
                       ; For 256x258 data, set to ~130.

setsquare=128          ; 0 = Preserve (non-square) aspect
                       ; 1 = Trim to square (auto = 256)
                       ; 128 = trim to array size 128 pix

noskyfit=1	       ; 0 = Chip-periphery sky subtraction [FOR FAINT SOURCES!]
		       ; 1 = NO Sky Subtraction (Recommended for Golay/subframe)
                       ; 2 = Don't even compute sky bgr! (=1 still puts it in stats)

discard_sigma=[3., 3., 3.5,  3.5, 90.]
                       ; 0 = manual discard (examine frames on-screen)
                       ; -1 = No discard procedure
                       ; Vector [3.,3.,3.0,5.0]
		       ; Removes Speckle frames whose statistics are
		       ;  are greaters than (discard_sigma) standard 
		       ;  deviations from the mean
		       ; **NOTE** if discard_sigma is a 5 element 
		       ; vector, then apply different sigma cuts for
		       ; each diagnostic variable.  
		       ; USAGE: discard_sigma=
                       ;   [x_pos_sigma,y_pos_sigma,total_counts_sigma,
                       ;       peak_pixel_sigma, fraction of peak median]
                       ;discard_sigma[4] is designed to reject low-strehl frames
                       ; It cuts on the mean and stdev of the TOP XX percent of 
                       ; frames with highest peak counts.  

save_dcube = 1         ;Save the a cube of darks (for power spectrum analysis)

;_____________________________________________________________
;  Information for Plotting
;_____________________________________________________________
plotall =1             ; 0 = no plots to screen
                       ; 1 = plot to screen 
hardcopy=0	       ; 0 = no hardcopy output
		       ; 1 = print all output
identifier='save'      ; save ps plots in data directory (default)
;identifier='nosave'      ; save ps plots in data directory (default)
                       ; 'nosave'= do not save output plots
;_____________________________________________________________
; The rest is done automatically.
;_____________________________________________________________
if (n_elements(prefix) eq 1) then prefix = replicate(prefix, n_elements(frames))
if (n_elements(updown) eq 1) then updown = replicate(updown, n_elements(frames))
if(updown[0] ne 0) then polzflag = 1 else polzflag = 0   ; flag to indicate wollaston(=1)

process_history=adate
if (noskyfit eq 0) then process_history=processtops_history+"Sky Subtraction;" else $
                     process_history=process_history+"No Sky Subtraction;"

set_plot,'x' ; bug fix - prevents runaway printing in cases after a crash
             ;   (e.g. all 100 sky subtract histograms can be printed out)

n_cubes=n_elements(frames)


; Construct cal4src matrix according to the cal4src flag
if(cal4src[0] eq -1) then begin              
   cal4src=intarr(n_cubes,n_cubes)      
   targ=where(tsize lt 0, complement=calib)
   if(calib[0] ne -1) then $
     for i=0,n_elements(targ)-1 do cal4src[calib,targ[i]]=1 
endif 
if(cal4src[0] eq -2) then begin
   cal4src = intarr(n_cubes,n_cubes)
   ngroups=nsrc/2
   for i=0,ngroups-1 do begin
     for j=0,3 do begin
       for k=j,nsrc*2-1,4 do begin
         cal4src[2*nsrc+k,4*i+j]=1
       endfor
     endfor
   endfor
endif
if(cal4src[0] eq -3) then begin
   cal4src = intarr(n_cubes,n_cubes)
   for i=0,2*nsrc-1 do begin
     cal4src[2*nsrc+i,i]=1
   endfor
endif

; Define data structure to hold all the frame statistics:
ina=intarr(n_cubes)		; this is for the index of good frames (-1 implies bad frame)
f=fltarr(n_cubes,2)		; this holds frame statistic and err
fl= fltarr(n_cubes,10,2)          ; average and errors.  src#, aperture size, 0=mean/1=error
framestats={xpk:f,ypk:f,totflx:f,pkflx:f,skybgr:f,phot:fl}   ; ,good_frames:ina} 

; Get data structure to hold Header info and comments
olog=make_olog(n_cubes,tsize,frames,skies)

; Begin to populate olog structure 
olog.adate=adate
olog.rawdir=ddir
olog.comments=comments
olog.proc_hist=process_history
olog.cal4src=cal4src

if ( (size(discard_sigma))(0) eq 0) then begin
  discard_sigma=replicate(discard_sigma,5)
endif

;
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Skies
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

restore,flat_file ; Restore Flat.
if(skies[0] ge 0) then begin 
   nskies=n_elements(skies) 
   for i=0,nskies-1 do begin	; BEGIN LOOP OVER SKY FILES
     cleansky_conica,skies[i],prefix=prefix,extn=extn,bad_pixels=bad_pixels,  $
        datadir=ddir_sky,root_dir=root_dir,supersky=ssky
     if(i eq 0) then skycube=ssky else skycube=[[[skycube]],[[ssky]]]
   endfor
   if(nskies gt 1) then begin
     supersky=total(skycube,3)/nskies
     for i=0,nskies-1 do begin
       skycube[*,*,i]=skycube[*,*,i]-supersky
       skycube[*,*,i]=skycube[*,*,i]/flat
     endfor
   endif else begin
     supersky=skycube
     skycube=skycube/flat
   endelse

; %%%%% Now write out the cleaned sky files as FITS
  filestring=[string(skies[0],format="(I4.4)")]
  filename="cube"+filestring+".fits"
  writefits,filename,skycube

endif else begin  ; OK so we have to make up a sky with all the images we have ...

  if(skies eq -1) then begin   ; case: make up a single sky frame for all data.
   nskies=1
   getssky_conica,frames,supersky,datadir=ddir,prefix=prefix,extn = extn, gain=flat, $
     starmask=skymask,handsky=dohandsky, sky_lr=sky_lr, bad_pixels=bad_pixels,polzflag=polzflag
  endif 

  if(skies eq -2) then begin   ; case: make up 2 sky frames for src and cal
   nskies=2
   fsrc=where(tsize lt 0)
   getssky_conica,frames(fsrc),supersky_src,datadir=ddir,prefix=prefix,extn = extn,gain=flat, $
     starmask=skymask,handsky=dohandsky, sky_lr=sky_lr, bad_pixels=bad_pixels,polzflag=polzflag
   fcal=where(tsize ge 0)
   getssky_conica,frames(fcal),supersky_cal,datadir=ddir,prefix=prefix,extn = extn,gain=flat, $ 
     starmask=skymask,handsky=dohandsky, sky_lr=sky_lr, bad_pixels=bad_pixels,polzflag=polzflag
   supersky=[[[supersky_src]],[[supersky_cal]]]
  endif

endelse


; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Target Star(s)
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


for cube_ix=0,n_cubes-1 do begin


if(nskies gt 0) then begin
  raw2cube_conica,frames[cube_ix],supersky,datadir=ddir, 		$ ; Input params
	gain=flat,bad_pixels=bad_pixels,skies=skies,tsz=tsize[cube_ix], $
	cube=scube,headinfo=headinfo,fstats=fstats,flux=flux,   	$ ; Output Params
	noskyfit=noskyfit,plotall=plotall,setsquare=setsquare,          $
        prefix=prefix[cube_ix],extn = extn, dcube=dkcube,               $
        updown=updown[cube_ix],horiz_destripe=horiz_destripe,           $
        discard_last=discard_last 
;	saturation_flag=saturation_flag				 

endif else begin
print,'you should not see this message!'
;  if(setsquare eq 0) then print,'ERROR ### Cannot preserve full frame for dithered data'
;  if(setsquare eq 1) then setsquare=256
;  raw2cube_dither_conica,frames[cube_ix],datadir=ddir, 		$ ; Input params
;	gain=flat,bad_pixels=bad_pixels, 	             	$
;	cube=scube,headinfo=headinfo,fstats=fstats,flux=flux,   	$ ; Output Params
;	noskyfit=noskyfit,plotall=plotall,setsquare=setsquare,          $
;        prefix=prefix,extn = extn, dcube=dkcube
;  if (save_dcube ne 1) then dcube = -1
endelse


  info=size(scube)
  if(info[0] gt 2) then nspeck=info(3) else nspeck=1



if (updown[cube_ix] lt 2) then $
 good_frames=flagbad_conica(fstats,scube,discard_sigma,tot_bad)

good_index=where(good_frames ge 0)
bad_frames=where(good_frames lt 0)

; %%%%% Plot out frame statistics
  if(identifier ne 'nosave') then $
  identifier = adate+"_"+string(frames[cube_ix],format="(I4.4)")+"a.ps"
  fnumstr=[string(frames[cube_ix],format="(I4.4)")]
  plota_nirc2,fstats,adate,headinfo,fnumstr,                        $
    process_history,comments,                                       $
    saturation_flag=saturation_flag,bad_frames=bad_frames,          $
    hardcopy=hardcopy,identifier=identifier

; Remove bad frame data from all arrays
   if ((size(bad_frames))[0] eq 0) then num_bad=0 else num_bad=n_elements(bad_frames)
   if(num_bad gt 0) then begin
     print,"Removing ",num_bad," flagged frames of bad data from this cube"
     scube=scube(*,*,good_index)
     fstats=fstats(*,*,good_index)
   endif

; %%%%% Reduce Aperture Photometry to averages 
; %%%%% and Populate framestats data structure.
  for flx=0,9 do framestats.phot[cube_ix,flx,0] =mean(flux[flx,*])
  for flx=0,9 do framestats.phot[cube_ix,flx,1] =stdev(flux[flx,*])
  framestats.xpk[cube_ix,*]        =[mean(fstats[0,*]),stdev(fstats[0,*])] 
  framestats.ypk[cube_ix,*]        =[mean(fstats[1,*]),stdev(fstats[1,*])] 
  framestats.totflx[cube_ix,*]     =[mean(fstats[2,*]),stdev(fstats[2,*])] 
  framestats.pkflx[cube_ix,*]      =[mean(fstats[3,*]),stdev(fstats[3,*])] 
  framestats.skybgr[cube_ix,*]     =[mean(fstats[4,*]),stdev(fstats[4,*])] 

; %%%%% Populate olog data structure.
  olog.instrument[cube_ix] =headinfo.instrument
  olog.nax1[cube_ix]       =headinfo.nax1
  olog.nax2[cube_ix]       =headinfo.nax2
  olog.t_int[cube_ix]      =headinfo.t_int
  olog.coadd[cube_ix]      =headinfo.coadd
  olog.filter[cube_ix]     =headinfo.filter
  olog.slit[cube_ix]       =headinfo.slit
  olog.optic_cfg[cube_ix]  =headinfo.optic_cfg
  olog.lyot[cube_ix]       =headinfo.lyot
  olog.grism[cube_ix]      =headinfo.grism
  olog.source_name[cube_ix]=headinfo.source_name
  olog.utc[cube_ix]        =headinfo.utc
  olog.date[cube_ix]       =headinfo.date
  olog.jd[cube_ix]         =headinfo.jd
  olog.elevation[cube_ix]  =headinfo.elevation
  olog.del_elev[cube_ix]   =headinfo.del_elev
  olog.airmass[cube_ix]    =headinfo.airmass
  olog.pa[cube_ix]         =headinfo.pa
  olog.del_pa[cube_ix]     =headinfo.del_pa
  olog.ra[cube_ix]         =headinfo.ra
  olog.dec[cube_ix]        =headinfo.dec
  olog.equinox[cube_ix]    =headinfo.equinox
  olog.mask                =headinfo.mask
  olog.flat_file           =flat_file


; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
; Target Star(s) END MODULE 
; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


; %%%%% Now write out the cleaned source files as FITS
; NOTE: there is only the minimal fits header, and the file output does
;       not have a unique identifier: it will be overwritten by 
;       subsequent runs. This is deliberate - if you want to regenerate
;       a particular cube, run the script over again.
  filestring=[string(frames[cube_ix],format="(I4.4)")]
  if (updown[cube_ix] gt 0) then filestring=filestring+'_'+strtrim(updown[cube_ix],2)
  filename="cube"+filestring+".fits"
  olog.cube_fname[cube_ix,0]=filename
  olog.cube_fname[cube_ix,1]=filestring
  writefits,filename,scube
  if (n_elements(dcube) gt 1) then begin
    filename = "dcube"+filestring+".fits"
    olog.dk_fname[cube_ix] =  filename
    writefits,filename,dcube
  endif
  olog.cube_tsize[cube_ix]=tsize[cube_ix]
  olog.cube_sz[cube_ix,*]= (size(scube))[1:3]
endfor 
; END big loop over all cubes

; NOT DONE YET - writeout darkframes in fits cube. 

; %%%%% Save the olog and framestats data structures for later use
save,olog,framestats,file='cubeinfo'+adate+'.idlvar'


end

